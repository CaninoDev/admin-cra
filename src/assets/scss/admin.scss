/** @format */

$enable-shadows: true;
$enable-gradients: true;
$enable-negative-margins: true;
$enable-rounded: true;

@import "~bootstrap/scss/bootstrap";
@import './variables';
@import './custom-forms';

// Generate WCAG 2.0 accessibility standard color contrasts
@each $color, $value in $theme-colors {
	.swatch-#{$color} {
		color: color-contrast($value);
	}
}

.input-group-xs > .node-input,
.input-group-xs > .btn,
.input-group-xs > .btn-group > .btn {
	padding: $input-padding-y-xs $input-padding-x-xs;
	@include font-size($input-font-size-xs);
	@include border-radius($input-border-radius-xs);
}

$focused-outline-color: #4c9ffe;
$box-shadow: 0 0.1rem 1rem rgba(#000, 0.15);

@mixin switch($res: 'sm') {
	$index: 1rem;
	$mainVal: 1rem;

	@if $res == 'md' {
		$index: 2rem;
		$mainVal: 1.5rem;
	} @else if $res == 'lg' {
		$index: 3rem;
		$mainVal: 2rem;
	} @else if $res == 'xl' {
		$index: 4rem;
		$mainVal: 2.5rem;
	}

	margin-bottom: $index / 2; /* JUST FOR STYLING PURPOSE */

	.form-check-input {
		height: $mainVal;
		width: calc(#{$index} + 0.75rem);
		border-radius: $mainVal * 2;
	}
}

@keyframes fadeIn {
	0% {
		background: rgba(0, 0, 0, 0);
	}
	100% {
		background: rgba(0, 0, 0, 0.7);
	}
}

@keyframes fadeOut {
	0% {
		background: rgba(0, 0, 0, 0.7);
	}
	100% {
		background: rgba(0, 0, 0, 0);
	}
}

@keyframes scaleUp {
	0% {
		transform: scale(0.8) translateY(1000px);
		opacity: 0;
	}
	100% {
		transform: scale(1) translateY(0px);
		opacity: 1;
	}
}

@keyframes scaleDown {
	0% {
		transform: scale(1) translateY(0px);
		opacity: 1;
	}
	100% {
		transform: scale(0.8) translateY(1000px);
		opacity: 0;
	}
}

.input-transition {
	-webkit-transition: all 300ms ease;
	-moz-transition: all 300s ease;
	-o-transition: all 300s ease;
	transition: all 300s ease;
}

body {
	font-family: 'Open Sans', sans-serif;
	height: 100vh;
	color: $gray-500;
}

a {
	color: $gray-700;
	transition: all 0.3s;
}

a:hover {
	text-decoration: none;
	color: $orange;
	background: transparent;
}

span {
	display: inline-flex;
}

ul {
	display: inline;
	flex-wrap: wrap;
	list-style: none;
}

#clock {
	cursor: default;
}

.P {
	width: 100%;
}

.menu-canvas {
	display: inline-flex;
	padding: $spacer;
	width: 100%;
}

.tree {
	display: contents;
	width: 100%;
	box-sizing: border-box;
	padding: 20px;
	justify-content: flex-start;
	flex-direction: column;
}

.image-button {
	border: #000;
	border-width: 5px;
}
.trunk {
	display: grid;
	grid-auto-rows: max-content;
	box-sizing: border-box;
	min-width: 350px;
	grid-gap: 10px;
	padding: 20px;
	padding-bottom: 0;
	margin: 10px;
	border-radius: 5px;
	min-height: 200px;
	transition: background-color 350ms ease;
	grid-template-columns: repeat(var(--columns, 1), 1fr);

	&:after {
		content: '';
		height: 10px;
		grid-column-start: span var(--columns, 1);
	}
}

.node-input {
	flex-grow: 1;
	@extend .input-transition;
	.node-title-input {
		width: 100%;
		outline: none;
		border: none;
		@extend .input-transition;
		&:focus {
			background-color: blue;
		}
	}
	&.node-input-item {
		font-size: $input-font-size-xs;
	}
	&:focus-within {
		background-color: $gray-900;
		border: rgba(10, 10, 10, 0.946);
	}
}


.custom-modal-dialog {
	position: relative;
	width: auto;
	height: subtract(100%, $modal-dialog-margin * 2);
	margin: $modal-dialog-margin;
	opacity: 0;
	animation: scaleUp 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
}
.custom-modal-content {
	position: relative;
	display: flex;
	flex-direction: column;
	width: 100%; // Ensure `.modal-content` extends the full width of the parent `.modal-dialog`
	// counteract the pointer-events: none; in the .modal-dialog
	color: $modal-content-color;
	pointer-events: auto;
	background-color: $modal-content-bg;
	background-clip: padding-box;
	border: $modal-content-border-width solid $modal-content-border-color;
	@include border-radius($modal-content-border-radius);
	@include box-shadow($modal-content-box-shadow-xs);
	// Remove focus outline from opened modal
	outline: 0;
}

.custom-modal-header {
	display: flex;
	flex-shrink: 0;
	align-items: center;
	justify-content: space-between; // Put modal header elements (title and dismiss) on opposite ends
	padding: $modal-header-padding;
	border-bottom: $modal-header-border-width solid $modal-header-border-color;
	@include border-top-radius($modal-content-inner-border-radius);

	.btn-close {
		padding: ($modal-header-padding-y / 2) ($modal-header-padding-x / 2);
		margin: ($modal-header-padding-y / -2) ($modal-header-padding-x / -2) ($modal-header-padding-y / -2) auto;
	}
}

.custom-modal-body {
	position: relative;
	// Enable `flex-grow: 1` so that the body take up as much space as possible
	// when there should be a fixed height on `.modal-dialog`.
	flex: 1 1 auto;
	padding: $modal-inner-padding;
}

.custom-modal-footer {
	display: flex;
	flex-wrap: wrap;
	flex-shrink: 0;
	align-items: center; // vertically center
	justify-content: flex-end; // Right align buttons with flex property because text-align doesn't work on flex items
	padding: $modal-inner-padding - $modal-footer-margin-between / 2;
	border-top: $modal-footer-border-width solid $modal-footer-border-color;
	@include border-bottom-radius($modal-content-inner-border-radius);

	// Place margin between footer elements
	// This solution is far from ideal because of the universal selector usage,
	// but is needed to fix https://github.com/twbs/bootstrap/issues/24800
	> * {
		margin: $modal-footer-margin-between / 2;
	}
}

.rounded {
	-webkit-border-radius: 6px;
	-moz-border-radius: 6px;
	-ms-border-radius: 6px;
	-o-border-radius: 6px;
	border-radius: 6px;
}

.form-input {
	// background: rgba(0, 0, 0, 0.2);
	color: $gray-800;
	// text-shadow: 1px 1px 0px rgba(0, 0, 0, 0.3);
	display: block;
	width: 269px;
	height: 1rem;
	padding: 15px;
	margin-bottom: 10px;
	outline: none;
	border: none;
	@extend .input-transition;
	@extend .rounded;
	&:focus {
		background: rgba(0, 0, 0, 0.1);
	}
}

.form-row {
	display: flex;
	align-items: center;
	justify-content: space-between;
}

.custom-form-label {
	margin-right: 5rem;
}

.float {
	position: fixed;
	bottom: 40px;
	right: 40px;
}
